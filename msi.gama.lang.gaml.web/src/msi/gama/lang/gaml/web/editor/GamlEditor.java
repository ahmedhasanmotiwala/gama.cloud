/**
 * @Generated by DSLFORGE
 */
package msi.gama.lang.gaml.web.editor;

import java.util.Collection;
import java.util.Collections;

import org.eclipse.jface.text.templates.persistence.TemplateStore;
import org.eclipse.swt.SWT;
import org.eclipse.swt.custom.CTabFolder;
import org.eclipse.swt.custom.CTabItem;
import org.eclipse.swt.events.MouseAdapter;
import org.eclipse.swt.events.MouseEvent;
import org.eclipse.swt.events.SelectionListener;
import org.eclipse.swt.graphics.Image;
import org.eclipse.swt.graphics.Rectangle;
import org.eclipse.swt.layout.FillLayout;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.ToolItem;
import org.eclipse.xtext.resource.XtextResource;

import msi.gama.lang.gaml.validation.IGamlBuilderListener;
import msi.gama.lang.gaml.web.ui.controls.FlatButton;
import msi.gama.lang.gaml.web.ui.interfaces.IModelRunner;
import msi.gama.lang.gaml.web.ui.resources.GamaColors.GamaUIColor;
import msi.gama.lang.gaml.web.ui.resources.GamaIcons;
import msi.gama.lang.gaml.web.ui.resources.IGamaColors;
import msi.gama.lang.gaml.web.ui.resources.IGamaIcons;
import msi.gama.lang.gaml.web.ui.utils.ModelRunner;
import msi.gama.lang.gaml.web.ui.views.toolbar.CreateExperimentSelectionListener;
import msi.gama.lang.gaml.web.ui.views.toolbar.GamaToolbar2;
import msi.gama.lang.gaml.web.ui.views.toolbar.GamaToolbarFactory;
import msi.gama.lang.gaml.web.ui.views.toolbar.IToolbarDecoratedView;
import msi.gama.lang.gaml.web.ui.views.toolbar.OpenImportedErrorSelectionListener;
import msi.gama.lang.gaml.web.ui.views.toolbar.RevalidateModelSelectionListener;
import msi.gaml.descriptions.IDescription;
import msi.gaml.descriptions.ValidationContext;

public class GamlEditor extends AbstractGamlEditor  implements IGamlBuilderListener, IToolbarDecoratedView {
	GamaToolbar2 toolbar;
	Composite toolbarParent;
//	private EditorSearchControls findControl;
//	boolean decorationEnabled = AutoStartup.EDITBOX_ENABLED.getValue();
//	boolean editToolbarEnabled = AutoStartup.EDITOR_SHOW_TOOLBAR.getValue();

	GamlEditorState state = new GamlEditorState(null, Collections.EMPTY_LIST);
	IModelRunner runner =new ModelRunner();
	private TemplateStore templateStore;
	static final String EDITOR_ID = "msi.gama.lang.gaml.web.editor";

	public GamlEditor() {
		super();
	}
	
//	@Override
//	protected ITextViewer createTextViewer(Composite parent, int styles) {
//		final BasicText textWidget = createTextWidget(parent, styles);
//		return (org.dslforge.styledtext.jface.TextViewer) new GamaTextViewer(textWidget, parent, styles,xtextResource);
//	}

	@Override
	public void createPartControl(final Composite compo) {
		configureTabFolder(compo);
		toolbarParent = GamaToolbarFactory.createToolbars(this, compo);
		final GridLayout layout = new GridLayout(1, false);
		layout.horizontalSpacing = 0;
		layout.verticalSpacing = 0;
		layout.marginWidth = 0;
		layout.marginHeight = 0;
		layout.marginLeft = 0;
		layout.marginRight = -5;
		toolbarParent.setLayout(layout);
		toolbarParent.setBackground(IGamaColors.WHITE.color());

		// Asking the editor to fill the rest
		final Composite editor = new Composite(toolbarParent, SWT.BORDER);
		final GridData data = new GridData(SWT.FILL, SWT.FILL, true, true);
		editor.setLayoutData(data);
		editor.setLayout(new FillLayout());
		super.createPartControl(editor);
		setResourceListener(this);
		validateResource();
//		final ITextViewer viewer = getViewer();// getSourceViewer();
//		if (viewer instanceof GamaTextViewer) {
//			((GamaTextViewer) viewer).setResourceListener(this);
//		}
		toolbarParent.layout();
//		installGestures();

	}

	private void configureTabFolder(final Composite compo) {
		Composite c = compo;
		while (c != null) {
			if (c instanceof CTabFolder)
				break;
			c = c.getParent();
		}
		if (c != null) {
			final CTabFolder folder = (CTabFolder) c;
			folder.setMaximizeVisible(true);
			folder.setMinimizeVisible(true);
			folder.setMinimumCharacters(10);
			folder.setMRUVisible(true);
			// Makes sure the listener is added only once
			folder.removeMouseListener(FIX_FOR_ISSUE_2108);
			folder.addMouseListener(FIX_FOR_ISSUE_2108);
		}

	}
	
	private static MouseAdapter FIX_FOR_ISSUE_2108 = new MouseAdapter() {

		@Override
		public void mouseUp(final MouseEvent e) {
			// System.out.println("MOUSE up IN TAB FOLDER");
			final CTabFolder folder = (CTabFolder) e.widget;
			final int x = e.x;
			final int y = e.y;
			for (final CTabItem item : folder.getItems()) {
				final Rectangle r = item.getBounds();
				if (r.contains(x, y) && !item.equals(folder.getSelection())) {
					System.out.println("Detected problem in editors tab selection (see #2108). Fixed.");
					folder.setSelection(item);
					folder.update();
					return;
				}
			}
		}

	};

	@Override
	public void createToolItems(GamaToolbar2 tb) {

		this.toolbar = tb;
		buildRightToolbar();		
	}

	private void buildRightToolbar() {
		toolbar.wipe(SWT.LEFT, true);
		final ToolItem t = toolbar.button(IGamaColors.NEUTRAL, "Waiting...", GamaIcons.create("status.clock").image(),
				null, SWT.LEFT);
		toolbar.sep(4, SWT.LEFT);

//		findControl = new EditorSearchControls(this).fill(toolbar.getToolbar(SWT.RIGHT));

		toolbar.refresh(true);
	}


	public XtextResource getXtextResource(){
		return xtextResource;
	}
	private void enableButton(final int index, final String text, final SelectionListener listener) {
		if (text == null) { return; }
		final boolean isBatch = state.types.get(index);
		final Image image = isBatch ? GamaIcons.create(IGamaIcons.BUTTON_BATCH).image()
				: GamaIcons.create(IGamaIcons.BUTTON_GUI).image();
		final ToolItem t = toolbar.button(IGamaColors.OK,
				text/* + "  " + GamaKeyBindings.format(GamlEditorBindings.MODIFIERS, String.valueOf(index).charAt(0)) */,
				image, SWT.LEFT);
		final String type = isBatch ? "batch" : "regular";
		t.getControl().setToolTipText("Executes the " + type + " experiment " + text);
		((FlatButton) t.getControl()).addSelectionListener(listener);
		t.setData("index", index);
		((FlatButton) t.getControl()).setData("exp", text);
		toolbar.sep(4, SWT.LEFT);
	}

	private void updateToolbar(final GamlEditorState newState, final boolean forceState) {
//		if (forceState || !state.equals(newState)) {
			Display.getDefault().asyncExec(() -> {
				if (toolbar == null || toolbar.isDisposed()) { return; }
				toolbar.wipe(SWT.LEFT, true);

				final GamaUIColor c = state.getColor();
				final String msg = state.getStatus();

				SelectionListener listener = null;
				String imageName = null;

				if (msg == GamlEditorState.NO_EXP_DEFINED) {
					listener = new CreateExperimentSelectionListener(GamlEditor.this, toolbar.getToolbar(SWT.LEFT));
					imageName = "small.dropdown";
				} else if (newState.hasImportedErrors) {
					listener = new OpenImportedErrorSelectionListener(GamlEditor.this, newState,
							toolbar.getToolbar(SWT.LEFT));
					imageName = "small.dropdown";
				} else if (msg != null) {
					listener = new RevalidateModelSelectionListener(GamlEditor.this);
					imageName = "marker.error2";
				} else {
					listener = new OpenExperimentSelectionListener(GamlEditor.this, newState, runner);
				}

				if (msg != null) {
					final ToolItem t = toolbar.button(c, msg, GamaIcons.create(imageName).image(), listener, SWT.LEFT);

					// without the following line, the display of the
					// text "msg" is not updated
					// correctly (at least for Windows OS)
					toolbar.sep(4, SWT.LEFT);
				} else {
					int i = 0;
					for (final String e : state.abbreviations) {
						enableButton(i++, e, listener);
					}

				}

				toolbar.refresh(true);

			});
//		}

	}
	@Override
	public void validationEnded(final Collection<? extends IDescription> newExperiments,
			final ValidationContext status) {

		if (newExperiments == null && state != null)
			updateToolbar(state, true);
		else {
			final GamlEditorState newState = new GamlEditorState(status, newExperiments);
			updateToolbar(newState, false);
			state = newState;
		}		
	}

//	public GamlTemplateStore getTemplateStore() {
//		return (GamlTemplateStore) templateStore;
//	}
}
